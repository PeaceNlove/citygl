CityGL.GML = function(doc){
	this.doc = doc;
	this.gml = 'http://www.opengis.net/gml';
}
CityGL.GML.prototype = {
	constructor : CityGL.GML,
	Read: function(){
		
	},	
	ParseExtent: function(element){
		var boundedby = element.getElementsByTagNameNS(this.gml, 'boundedBy');
		var envelope = boundedby[0].getElementsByTagNameNS(this.gml, 'Envelope');
		var srs = envelope[0].attributes.getNamedItem('srsName').value;
		var dims = envelope[0].attributes.getNamedItem('srsDimension').value;
		var extent = [];
		var lowerCorner = this.ParsePos(envelope[0].getElementsByTagNameNS(this.gml, 'lowerCorner')[0]);
		var upperCorner = this.ParsePos(envelope[0].getElementsByTagNameNS(this.gml, 'upperCorner')[0]);
		return {SRS: srs, lowerCorner: lowerCorner, upperCorner: upperCorner};
	},
	ParseMultiSurface: function(multisurface, materials){
		var dims = multisurface.hasAttribute('srsDimension') ? parseInt(multisurface.attributes.getNamedItem('srsDimension').value):3;
		var geometries = [];
		var surfaces = multisurface.getElementsByTagNameNS(this.gml, 'surfaceMember');
		for (var i = 0; i< surfaces.length; i++){
			var polygons = surfaces[i].getElementsByTagNameNS(this.gml,'Polygon');
			for (var j =0; j<polygons.length;j++){
				var g = this.ParsePolygon(polygons[j], materials);
				if (g != null){
					geometries.push(g);
				}
			}
		}
		return geometries;
	},
	ParsePos: function(pos){
		var a = pos.childNodes[0].nodeValue.split(' ');
		for (var i = 0; i< a.length;i++){a[i] = parseFloat(a[i]);}
		return a;
	},
	ParsePosList: function(poslist){
		var a = poslist.childNodes[0].nodeValue.split(' ');
		for (var i = 0; i<a.length;i++){a[i] = parseFloat(a[i]);}
		return a;
	},
	ParseLinearRing: function(ring){
		var id = ring.attributes.getNamedItemNS(this.gml,'id').value;
		var posItems = [];
		var pos = ring.getElementsByTagNameNS(this.gml, 'pos');
		for (var i = 0; i< pos.length; i++){posItems = posItems.concat(this.ParsePos(pos[i]));}
		var posList= ring.getElementsByTagNameNS(this.gml, 'posList');		
		if (posList.length >0){posItems = posItems.concat(this.ParsePosList(posList[0]));}
		var l = posItems.length;
		if (posItems[0] == posItems[l-3] && posItems[1] == posItems[l-2] && posItems[2] == posItems[l-1]){posItems  = posItems.slice(0,l-3);}
		return {id: id, coordinates: posItems};
	},
	ParsePolygon: function(polygon, materials,dims, z){
		var id = polygon.attributes.getNamedItemNS(this.gml,'id').value;
		var ext = polygon.getElementsByTagNameNS(this.gml, 'exterior')[0].getElementsByTagNameNS(this.gml,'LinearRing')[0];
		var exterior = this.ParseLinearRing(ext);
		var interiors = polygon.getElementsByTagNameNS(this.gml, 'interior');
		var interiorrings = [];
		for (var i = 0; i< interiors.length; i++){
			interiorrings[i] = this.ParseLinearRing(interiors[i].getElementsByTagNameNS(this.gml,'LinearRing')[0]);
		}
		//extrude via shape		
		if (dims ==2 ){
			if (z ==  undefined){z=3;}
			var points=  [];
			for(var i =0; i< exterior.coordinates.length; i++){point.push(new THREE.Vector2 ( exterior.coordinates[i], exterior.coordinates[i++] ));}
			var shape = new THREE.Shape( points );
			for (var i = 0; i< interiorrings.length; i++){
				var holePoints = [];
				for (var j= 0; j< interiorrings[i].length; i++){holePoints.push(new THREE.Vector2 ( interiorrings[i].coordinates[j], interiorrings[i].coordinates[j++] ));}
				shape.holes[i]=new THREE.Shape( holePoints );
			}
			var extrudeSettings = { amount: z , bevelEnabled: false}; 
			var g =  new THREE.ExtrudeGeometry(shape,extrudeSettings);
			g.id = id;
			g.ringId = exterior.id;
			return g;
		}
		else{
			if (id == '95ecbf78-b1bd-4824-a4d6-c07545694670'){
				var breek = true;
			}	
			var zx=1, zy= 1;
			var xmin,xminindex,xmax,xmaxindex;
			xmin = Number.MAX_VALUE;
			xmax = Number.MIN_VALUE;
			for (var i = 0; i< exterior.coordinates.length; i++){
				if (exterior.coordinates[i] <xmin){xminindex = i; xmin = exterior.coordinates[i];}
				if (exterior.coordinates[i] >xmax){xmaxindex = i; xmax = exterior.coordinates[i];}
				i+=2;
			}
			if (exterior.coordinates[xminindex+1] <exterior.coordinates[xmaxindex+1]){zy = -1;}
			
			var ring2D = this.Convert3Dto2D(exterior,zx,zy);
			if (ring2D.length <3){return null;} else{
				try
				{
					var swctx = new poly2tri.SweepContext(ring2D);
					for (var i = 0; i< interiorrings.length; i++){	swctx.addHole(this.Convert3Dto2D(interiorrings[i],zx,zy));}
					swctx.triangulate();
					var pointindex = [];
					var geometry = new THREE.Geometry();
					for (var i = 0; i< swctx.points_.length;i++){					
						geometry.vertices.push( new THREE.Vector3( swctx.points_[i].x- swctx.points_[i].z*zx , swctx.points_[i].y-swctx.points_[i].z*zy, swctx.points_[i].z ) );
						pointindex[swctx.points_[i].id] = i;
					}
					var color =new THREE.Color( 0xffffff );
					var triangles = swctx.getTriangles();
					var uvIndex;
					var materialIndex;
					for (var i = 0; i< materials.length; i++){
						for (var j= 0; j < materials[i].targets.length; j++){
							if (materials[i].targets[j].uri =='#'+id){
								if (materials[i].targets[j].hasOwnProperty('textureCoordinates')){
									uvIndex = materials.linearRing;
								}
								materialIndex = i;
								i = materials.length;
								break;
							}
						}
					}
					for (var i = 0; i< triangles.length; i++){
						var normal = new THREE.Vector3( 0, 0, 1 );
						var a = pointindex[triangles[i].points_[0].id], b = pointindex[triangles[i].points_[1].id], c = pointindex[triangles[i].points_[2].id];
						if(a != undefined && b != undefined && c != undefined){	
							var f = new THREE.Face3(a ,b ,c ,normal, color,0 );
							f.materialIndex  =materialIndex;
							geometry.faces.push( f );
							if (uvIndex && uvIndex.length >0 && uvIndex[a]!= undefined &&uvIndex[b]!= undefined&& uvIndex[c] != undefined){
								geometry.faceVertexUvs[0].push([uvIndex[a], uvIndex[b], uvIndex[c]]);
							}
						}
						else{	}					
					}
					geometry.computeBoundingSphere();
					geometry.id = id;
					geometry.ringId = exterior.id;
					return geometry;
				}
				catch(err){
					console.log(id);
					return null;
				}
			}
		}
	},
	Convert3Dto2D: function (linearring, zx, zy){
		var ring = linearring.coordinates;
		var ring2D = [];
		for (var i = 0; i< ring.length; i++){
			var isdouble = false;
			for (var j = i+3; j< ring.length;j++){						
				if (ring[i] == ring[j] && ring[i+1]== ring[j+1]&& ring[i+2] == ring[j+2]){
					isdouble  =true;
					console.log(linearring.id + ":"+i );
					break;
				}
				j+=2;
			}
			if(!isdouble){ring2D.push({x:ring[i]+ring[i+2]*zx, y: ring[i+1]+ring[i+2]*zy, z: ring[i+2], id :linearring.id+'_'+i/3});}
			i+=2;
		}
		return ring2D;
	}
}